---
extensions:
  basicauth/github:
    client_auth:
      username: ${env:GH_USER}
      password: ${env:GH_PAT}
  # health_check:
  # pprof:
  # endpoint: 0.0.0.0:1777
  # zpages:
  # endpoint: 0.0.0.0:55679

receivers:
  otlp:
    protocols:
      grpc:
      http:

  ## Collect own metrics based on example from OTEL Contrib Dockerfile
  ## https://github.com/open-telemetry/opentelemetry-collector-releases/blob/main/configs/otelcol-contrib.yaml
  prometheus:
    config:
      scrape_configs:
        - job_name: "${env:GH_ORG}-otel-collector"
          scrape_interval: 10s
          static_configs:
            - targets: [0.0.0.0:8888]

  webhookevent:
    endpoint: 0.0.0.0:8088
    path: "/events"
    health_path: "/healthcheck"

  gitprovider:
    initial_delay: 1s
    collection_interval: 300s
    scrapers:
      github:
        github_org: "${env:GH_ORG}"
        search_query: "${env:GH_SEARCH_QUERY}"
        auth:
          authenticator: basicauth/github
        metrics:
          git.repository.contributor.count:
            enabled: true

processors:
  transform/deployments:
    log_statements:
      - context: log
        statements:
          - merge_maps(attributes, ParseJSON(body), "upsert")
          - set(attributes["name"], attributes["workflow"]["name"]) where attributes["workflow"]["name"] != nil
          - set(attributes["created_at"], attributes["deployment"]["created_at"]) where attributes["deployment"]["created_at"] != nil
          - set(attributes["status"], attributes["deployment_status"]["state"]) where attributes["deployment_status"]["state"] != nil
          - set(attributes["user"], attributes["deployment"]["creator"]["login"]) where attributes["deployment"]["creator"]["login"] != nil
          - set(attributes["repository.name"], attributes["repository"]["name"]) where attributes["repository"]["name"] != nil
          - set(attributes["action"], attributes["action"]) where attributes["action"] != nil

  transform/issues:
    log_statements:
      - context: log
        statements:
          - merge_maps(attributes, ParseJSON(body), "upsert")
          - set(attributes["repository.name"], attributes["repository"]["name"]) where attributes["repository"]["name"] != nil
          - set(attributes["created_at"], attributes["issue"]["created_at"]) where attributes["issue"]["created_at"] != nil
          - set(attributes["closed_at"], attributes["issue"]["closed_at"]) where attributes["issue"]["closed_at"] != nil
          - set(attributes["action"], attributes["action"]) where attributes["action"] != nil

  attributes/deployments:
    actions:
      - action: upsert
        key: loki.attribute.labels
        value: repository.name, status, user, name, created_at
  attributes/issues:
    actions:
      - action: upsert
        key: loki.attribute.labels
        value: repository.name, action, created_at, closed_at
  filter/deployments:
    logs:
      include:
        match_type: regexp
        record_attributes:
          - key: status
            value: "success|failure"
  filter/issues:
    logs:
      exclude:
        match_type: regexp
        record_attributes:
          - key: action
            value: "reopened|labeled"

  batch:
  resourcedetection:
    detectors: [env]
    timeout: 2s
    override: false
  resource:
    attributes:
      - key: organization.name
        value: "${env:GH_ORG}"
        action: upsert
exporters:
  logging:
    verbosity: detailed

  prometheus:
    endpoint: "${env:HOSTNAME}:9464"
    resource_to_telemetry_conversion:
      enabled: true
    enable_open_metrics: true
    add_metric_suffixes: false
  
  loki:
    endpoint: "http://loki:3100/loki/api/v1/push"

  ## Uncomment if you want to use OTLP exportation to Grafana cloud
  ## and update with your region
  #otlphttp:
  #  auth:
  #    authenticator: basicauth/grafana
  #  endpoint: https://otlp-gateway-prod-us-central-0.grafana.net/otlp

service:
  ## Add basicauth/* if you want to use basic auth extensions
  ##extensions: [health_check, pprof, zpages, basicauth/github]
  extensions: [basicauth/github]
  pipelines:

    logs/deployments:
      receivers: [webhookevent]
      processors: [transform/deployments, attributes/deployments, filter/deployments]
      exporters: [loki]

    logs/issues:
      receivers: [webhookevent]
      processors: [transform/issues, attributes/issues, filter/issues]
      exporters: [loki]

    metrics:
      receivers: [otlp, gitprovider]
      processors: [resource]
      exporters: [logging, prometheus]

    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging]

  telemetry:
    logs:
      level: debug
